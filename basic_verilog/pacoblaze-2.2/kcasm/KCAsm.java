/* Generated By:JavaCC: Do not edit this line. KCAsm.java */
import java.util.Vector;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

class KCAsm implements KCAsmConstants {

        /** Tracks the current line number. */
        int lines = 1;
        /** Assembler expressions (ie, the parsed program). */
        Vector expressions;

        public static void main(String[] args)
        throws ParseException, IOException {
                if (args.length < 2) {
                        usage();
                        return;
                }

                Properties pr = System.getProperties();
                String s;
                int kcpsm = -1, bram = -1;
                String mn = null;

                s = pr.getProperty("kcpsm");
                if (s != null) kcpsm = Integer.parseInt(s);
                s = pr.getProperty("bram");
                if (s != null) bram = Integer.parseInt(s);
                mn = pr.getProperty("module");

                if (kcpsm < 1 || kcpsm > 3) { usage(); return; }
                if (bram != 16 && bram != 18) { usage(); return; }
                if (mn == null || mn.length() == 0) { usage(); return; }

                FileInputStream fi = new FileInputStream(args[0]);

                KCAsm p = new KCAsm(fi);
                p.expressions = new Vector();
                p.Start();
                fi.close();

                Assembler asm;
                switch (kcpsm) {
                        case 1: asm = new Assembler1(p.expressions); break;
                        case 2: asm = new Assembler2(p.expressions); break;
                        case 3: asm = new Assembler3(p.expressions); break;
                        default: asm = null; break;
                }

                // FileOutputStream fo = new FileOutputStream(basename(args[0]) + ".rmh");
                FileOutputStream fo = new FileOutputStream(args[1]);
                fo.write(asm.toString().getBytes());
                fo.close();

                fo = new FileOutputStream(mn + ".v");
                fo.write(asm.toBlockRAM(mn).getBytes());
                fo.close();

                // asm.toVerilog(args[0]);
        }

        static void usage() {
                System.err.println(
                        "Usage: java -Dkcpsm={1,2,3} -Dbram={16,18} -Dmodule={name} KCAsm {psm_file} {rmh_file}"
                );
        }

        static String basename(String n) {
                int dp = n.indexOf('.');
                return n.substring(0, dp-1).trim();
        }

/** Valid program is a sequence of valid expressions followed by EOF. */
  final public void Start() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      Expression();
    }
    jj_consume_token(0);
  }

/** Valid expressions are labels, commands and comments. */
  final public void Expression() throws ParseException {
    if (jj_2_6(2)) {
      LabelExpression();
      if (jj_2_2(2)) {
        jj_consume_token(EOL);
                        lines += 1;
      } else {
        ;
      }
    } else if (jj_2_7(2)) {
      CommandExpression();
      if (jj_2_3(2)) {
        CommentExpression();
      } else if (jj_2_4(2)) {
        jj_consume_token(EOL);
                        lines += 1;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_8(2)) {
      if (jj_2_5(2)) {
        CommentExpression();
      } else {
        ;
      }
      jj_consume_token(EOL);
                lines += 1;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** Valid comment expressions start with a semicolon, which is not part of the
	comment content.
*/
  final public void CommentExpression() throws ParseException {
        Token t;
    jj_consume_token(SEMICOLON);
    t = jj_consume_token(COMMENT);
          expressions.add(new Comment(lines, t.image));
  }

/** Valid label expressions are words followed by a colon, which is not part of
	the label content.
*/
  final public void LabelExpression() throws ParseException {
        Token t;
    t = jj_consume_token(LABEL);
          expressions.add(new Label(lines, t.image.replace(':', ' ').trim()));
  }

/** Valid command expressions consist of an initial word (command name),
	followed by an optional, comma separated argument list.
*/
  final public void CommandExpression() throws ParseException {
        Token t;
        Command c;
        Vector l = null;
    t = jj_consume_token(WORD);
    if (jj_2_9(2)) {
      l = Arguments();
    } else {
      ;
    }
          expressions.add(new Command(lines, t.image, l));
  }

/** Valid numbers are binary, octal, decimal, hexadecimal and ascii character
	values.
*/
  final public Integer Number() throws ParseException {
        Token t;
    if (jj_2_10(2)) {
      t = jj_consume_token(BINARY);
                       {if (true) return Integer.valueOf(t.image.replace('%', ' ').trim(), 2);}
    } else if (jj_2_11(2)) {
      t = jj_consume_token(OCTAL);
                      {if (true) return Integer.valueOf(t.image.replace('@', ' ').trim(), 8);}
    } else if (jj_2_12(2)) {
      t = jj_consume_token(DECIMAL);
                        {if (true) return Integer.valueOf(t.image.replace('&', ' ').trim(), 10);}
    } else if (jj_2_13(2)) {
      t = jj_consume_token(HEXADECIMAL);
                            {if (true) return Integer.valueOf(t.image.replace('$', ' ').trim(), 16);}
    } else if (jj_2_14(2)) {
      t = jj_consume_token(ASCII);
                      {if (true) return new Integer((int)t.image.charAt(1));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* A literal is a word (symbol name) or a number. */
  final public Object Literal() throws ParseException {
        Token t;
        Integer n;
    if (jj_2_15(2)) {
      t = jj_consume_token(WORD);
                     {if (true) return t.image;}
    } else if (jj_2_16(2)) {
      t = jj_consume_token(PWORD);
                {if (true) return t.image.substring(1, t.image.length()-1);}
    } else if (jj_2_17(2)) {
      n = Number();
                       {if (true) return n;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* An argument list is a comma separated sequence of literals that are packed
	into a vector.
*/
  final public Vector Arguments() throws ParseException {
        Vector l = new Vector();
        Object o;
    o = Literal();
                        l.add(o);
    label_2:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(15);
      o = Literal();
                                    l.add(o);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(WORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  final private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(PWORD)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(ASCII)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(COMMENT)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(HEXADECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(OCTAL)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(BINARY)) return true;
    return false;
  }

  public KCAsmTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public KCAsm(java.io.InputStream stream) {
     this(stream, null);
  }
  public KCAsm(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KCAsmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public KCAsm(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KCAsmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public KCAsm(KCAsmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(KCAsmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[16];
    for (int i = 0; i < 16; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
